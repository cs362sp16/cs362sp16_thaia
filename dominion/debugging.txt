Rather than a function/card in dominion.c, I ended debugging my random tests,
so that they could be used to showcase/test Tarantula.

To figure out the problem with my code, I used print statements and the gcov
coverage results.

The main issue that I spent an embarrassingly long time struggling with was
with game initialization. After refactoring my code so that it would run the 
random tests several hundered times more, I accidentally introduced a bug. 

Due to the reformatting, game initialization had to happen within a for loop,
on every instance that the tests were run. Otherwise, only the first run would
pass, resulting in hundreds of failed tests. I didn't figure this out until
much later.

The process in which I took to resolve this was a combination of brute effort
and several of Agan's rules. Specifically rule #4 and #5: "Divide and Conquer"
and "Change One Thing at a Time".

Because I was changing all my random tests to do multiple runs, I introduced
the bug to every file. But luckily, one of the cards that I was testing
happened to be ``smithy``, which adds two cards to the hand after being played.
Because the function had the most predictable behavior, I focused on solving
the issues in it first. 

I mainly commented out the different parts of the file while continuously
running the random test and parsing the output. At this point, I had already
written part of my script for Tarantula, so I also used that to better
interpret the .out file generated by the random card test.

After a long process of comparing the differences between my changes and an old
copy of the file on github, alongside manually writing down the code and
walking through it line by line, I realized that I only every initialized the
game once, even though I was running the tests upwards of a hundred times.
Since the game state never changed, ``smithy`` was never played and the hand
count couldn't be updated (which was what my assert was checking against).

Long story short: the biggest obstacle in bugless code is the dev's own
stupidity.
