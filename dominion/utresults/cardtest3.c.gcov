        -:    0:Source:tests/cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include "../dominion.h"
        -:    3:
        -:    4:// Card Test 3 - Steward 
        -:    5:
        -:    6:int failed = 0;
        -:    7:
        3:    8:void assertTF(int b, char *msg){
        3:    9:  if (b == 0){
        2:   10:    printf("FAILED ASSERTION: %s\n", msg);
        2:   11:    failed = 1;
        -:   12:  }
        3:   13:}
        -:   14:
        1:   15:void checkasserts(){
        1:   16:  if (!failed){
    #####:   17:    printf("TEST SUCCESSFULLY COMPLETED\n");
        -:   18:  }
        1:   19:}
        -:   20:
        1:   21:int main(){
        -:   22:  struct gameState g;
        1:   23:  int k[10] = {steward, smithy, adventurer, gardens, embargo, cutpurse, mine,
        -:   24:               outpost, baron, tribute};
        -:   25:
        1:   26:  int choice2 = 0;
        1:   27:  int choice3 = 0;
        1:   28:  int handPos = 0;
        -:   29:
        1:   30:  initializeGame(2, k, 5, &g);
        1:   31:  g.hand[0][0] = steward;
        1:   32:  g.whoseTurn = 0;  
        -:   33:
        1:   34:  int num = numHandCards(&g);
        1:   35:  playCard(handPos, 1, choice2, choice3, &g);
        1:   36:  int numa = numHandCards(&g);
        -:   37:  
        -:   38:  // Steward adds two cards to the hand if choice1 == 1
        1:   39:  assertTF(numa = num + 2, "Add 2 card to hand\n");
        -:   40:
        1:   41:  int coins = g.coins;
        -:   42:  // Steward adds two coins if choice1 == 2
        1:   43:  printf("coins b: %d\n", g.coins);
        1:   44:  playCard(handPos, 2, choice2, choice3, &g);
        1:   45:  assertTF(g.coins == coins + 2, "Add 2 coins\n");
        1:   46:  printf("coins a: %d\n", g.coins);
        -:   47:
        1:   48:  num = numHandCards(&g);
        -:   49:  // Steward trashes two cards if choice1 == 3
        1:   50:  playCard(handPos, 3, choice2, choice3, &g); 
        1:   51:  numa = numHandCards(&g);
        1:   52:  assertTF(numa == num - 3, "Trash 2 cards\n");
        -:   53:
        1:   54:  checkasserts();
        -:   55:}
