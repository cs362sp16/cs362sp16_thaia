        -:    0:Source:tests/randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <time.h>
        -:    5:#include "../dominion.h"
        -:    6:#include "../rngs.h"
        -:    7:
        -:    8:// Random Test Adventurer
        -:    9:
        -:   10:int failed = 0;
        -:   11:
        3:   12:void assertTF(int b, char *msg){
        3:   13:  if (b == 0){
        1:   14:    printf("FAILED ASSERTION: %s", msg);
        1:   15:    failed = 1;
        -:   16:  }
        3:   17:}
        -:   18:
        -:   19:/*void checkasserts(){
        -:   20:  if (!failed){
        -:   21:    printf("TEST SUCCESSFULLY COMPLETED.\n\n");
        -:   22:  }
        -:   23:}*/
        -:   24:
        1:   25:int main(int argc, char *argv[]){
        -:   26:  int i, j, r, ff, numplayers, randSeed;
        1:   27:  int k[10] = {smithy, adventurer, gardens, embargo, cutpurse, mine, ambassador,
        -:   28:               outpost, baron, tribute};
        -:   29:  int choice[4];
        1:   30:  srand(time(NULL)); // Seed rng
        -:   31:  
        -:   32:  struct gameState g;
        -:   33:
        1:   34:  printf("``adventurer`` -- RANDOM TESTS START \n");
        -:   35:
        1:   36:  if (argc >= 2){
        1:   37:    randSeed = atoi(argv[1]);
        -:   38:  }
        -:   39:  else{
    #####:   40:    randSeed = rand();
        -:   41:  }
        -:   42:
        1:   43:  numplayers = rand() % 2 + 2;
        1:   44:  initializeGame(numplayers, k, randSeed, &g);
        -:   45:
        3:   46:  for (i = 0; i < numplayers; i++){
        2:   47:    g.deckCount[i] = rand() % MAX_DECK;
        2:   48:    g.handCount[i] = rand() % MAX_HAND;
        2:   49:    g.discardCount[i] = rand() % MAX_HAND;
        -:   50:    // Randomly generating choices to be played in cardEffect
        8:   51:    for (j = 0; j < 3; j++){
        6:   52:      choice[j] = rand() % 2 + 1;
        -:   53:    }
        2:   54:    r = cardEffect(adventurer, choice[0], choice[1], choice[2], &g, 0, 0);
        2:   55:    assertTF(r == 0, "Adventurer played successfully\n");
        -:   56:  }
        -:   57:  // ff = force fail to check that cardEffect isn't arbitrarily passing
        1:   58:  g.handCount[i] = MAX_HAND + 1;
        1:   59:  ff = cardEffect(adventurer, choice[0], choice[1], choice[2], &g, 0, 0);
        1:   60:  assertTF(ff = 0, "Adventurer played successfully\n");
        -:   61:
        1:   62:  printf("``adventurer`` -- RANDOM TESTING COMPLETE \n\n");
        -:   63:  
        -:   64:  //failed = 0; // reset flag to 0 after ff -- otherwise checkasserts() fails
        -:   65:  //checkasserts();
        -:   66: 
        -:   67:  /* For some reason, using checkasserts() in place of a return/exit statement
        -:   68:     Causes the following to be printed in the coverage results:
        -:   69:    
        -:   70:        File '<built-in>'
        -:   71:        No executable lines
        -:   72:        Removing '<built-in>.gcov'
        -:   73:
        -:   74:    So to avoid that, I'm returning zero here instead of using checkasserts()
        -:   75:    Note: I'm only making the change in this file */
        -:   76:  
        1:   77:  return 0;
        -:   78:}
